// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id        String     @id @default(cuid())
    username  String     @unique
    email     String    @unique
    role      Role       @default(USER)
    password  String
    createdAt DateTime   @default(now())
    updateAt  DateTime?  @updatedAt
    deletedAt DateTime?
    accounts  Account[]
    sessions  Session[]
    quotes    Quote[]
    favorites Favorite[]
    photo     Photo? @relation("UserPhoto")
}

model Quote {
    id         String     @id @default(cuid())
    title      String  
    content    String
    user       User       @relation(fields: [userId], references: [id])
    userId     String
    category   Category   @relation(fields: [categoryId], references: [id])
    categoryId String
    createdAt  DateTime   @default(now())
    updateAt   DateTime?  @updatedAt
    deletedAt  DateTime?
    favorites  Favorite[]
    @@unique([id, userId])
}

model Category {
    id        String    @id @default(cuid())
    name      String
    createdAt DateTime  @default(now())
    updateAt  DateTime? @updatedAt
    deletedAt DateTime?
    quotes    Quote[]
    photo     Photo? @relation("CategoryPhoto")
}

model Favorite {
    user      User      @relation(fields: [userId], references: [id])
    userId    String
    quote     Quote     @relation(fields: [quoteId], references: [id])
    quoteId   String
    createdAt DateTime  @default(now())
    deletedAt DateTime?
    @@unique([userId, quoteId])
}

model Photo {
    id        String    @id @default(cuid())
    user      User?      @relation("UserPhoto",fields: [PhotoableId], references: [id], map: "user_photoableId")
    category      Category?      @relation("CategoryPhoto",fields: [PhotoableId], references: [id], map: "category_photoableId")
    PhotoableId    String @unique 
    PhotoableType   PhotoableType   
    url String
    createdAt DateTime  @default(now())
    deletedAt DateTime?
}

enum PhotoableType {
  User
  Category
}

enum Role {
    USER
    ADMIN
}
